/*
Create a class called Complex for performing arithmetic with complex numbers. Complex numbers have
the form realPart + imaginaryPart * i, where i is −1.
Write a program to test your class. Use floating‐point variables to represent the private data of the class.
Provide a constructor that enables an object of this class to be initialized when it is declared.
Provide a no‐argument constructor with default values in case no initializers are provided.
Provide public methods that perform the following operations:
a) Add two Complex numbers (using operator overloading): The real parts are added together and the
imaginary parts are added together.
b) Subtract two Complex numbers (using operator overloading): The real part of the right operand is
subtracted from the real part of the left operand, and the imaginary part of the right operand is subtracted
from the imaginary part of the left operand.
c) Print Complex numbers in the form (a, b), where a is the real part and b is the imaginary part.
d) In class Complex, define a multiply method (using operator overloading) that returns the product of
two Complex numbers. Suppose you are trying to compute the product of two complex numbers a + bi
and c + di. The real part will be ac – bd, while the imaginary part will be ad+ bc.
*/

#include <iostream>
using namespace std;

class complex{
	
float real, img;
public:
	complex() {};
	complex(float, float);
	complex operator+ (complex);	//overloading for +
	complex operator- (complex);	//overloading for -
	complex operator* (complex);	//overloading for *
	void a_print();		//print function for sum
	void b_print();		//print function for subtraction
	void c_print();		//print function for product

};

complex::complex(float a, float b)	//default constructor
{
	real = a;
	img  = b;
}
void complex::a_print() 	//print for sum
{
	cout<<"\n\n Sum of Complex Numbers : "<<"("<< real << " + " << img <<"i)";
	cout<<"\n => Where "<<real<<" is Real Number and "<<img<<" is Imaginary Number  \n"<<endl;
}

void complex::b_print() 	//print for subtract
{
	cout<<"\n Subtract of Complex Numbers: "<<"("<< real << " + " << img <<"i)";
	cout<<"\n => Where "<<real<<" is Real Number and "<<img<<" is Imaginary Number  \n"<<endl;
}

void complex::c_print() 	//print for product
{
	cout<<"\n Product of Complex Numbers: "<<"("<< real << " + " << img <<"i) \n ";
	cout<<"\n => Where "<<real<<" is Real Number and "<<img<<" is Imaginary Number  \n"<<endl;
}

complex complex::operator+ (complex obj)	//overloading +
{
	complex temp;
	temp.real =real + obj.real;
	temp.img = img + obj.img;

	return temp;
}

complex complex::operator- (complex obj)	//overloading -
{
	complex temp;
	temp.real =real - obj.real;
	temp.img = img - obj.img;

	return temp;
}

complex complex::operator* (complex obj)	//overloading *
{
	complex temp;
	temp.real =real * obj.real;
	temp.img = img * obj.img;
	
	return temp;
}

int main(){
	
	float r_1, r_2 , i_1 , i_2;			//declaring variables

	//Inputting Data 

	cout<<"\tData Input \n"<<endl;
	cout<<"Enter Real Number of Object 1 : ";	
		cin>>r_1;
	cout<<"Enter Real Number of Object 2 : ";
		cin>>r_2;
	cout<<"\nEnter Imaginary Number of Object 1 : ";
		cin>>i_1;	
	cout<<"Enter Imaginary Number of Object 2 : ";
		cin>>i_2;
	
	complex Obj1(r_1 , i_1);	//Creating 2 objects 
	complex Obj2(r_2 , i_2);
	
	complex sum;				//creating objects to access overloading
	complex sub;
	complex mul;
	
	sum = Obj1 + Obj2;			//Performing Arithmetic on our objects through overloading
	sub = Obj1 - Obj2;
	mul = Obj1 * Obj2;
	
	sum.a_print();				//Printing the Answers
	sub.b_print();
	mul.c_print();
	
return 0;

}
